1. what is version control system
	A version control system (VCS) is a software tool that helps track and manage changes to files, especially in software development. It allows multiple developers to collaborate, maintaining a record of changes made, facilitating collaboration, enabling reversion to previous versions, and managing different versions of files. Examples include Git, Subversion (SVN), and Mercurial.

2. Source Code Management
	Source Code Management (SCM) is a broader term encompassing the management of changes to any kind of information source, not just software source code. It involves tracking and controlling changes to documents, programs, and other information assets. 

3. git pull and git fetch
	git pull: This command is used to fetch the changes from the remote repository and merge them into your local branch. It is essentially a combination of git fetch and git merge. When you run git pull, it automatically fetches the changes from the remote branch and merges them into your current local branch.
        git pull <remote>
	git fetch: This command only fetches the changes from the remote repository and stores them in your local repository, without automatically merging them into your current branch. It allows you to see what changes are present in the remote branch and gives you the opportunity to decide how to integrate those changes into your local branch.
        git fetch <remote>

4. git log
	The git log command is used to display the commit history in the repository. It shows the commit logs starting from the latest commit, allowing you to view information such as commit hashes, author details, dates, and commit messages. Here's an example of how to use it: $ git log
	git log using various options. For example, you can use options like --oneline to display each commit on a single line or --graph to visualize the commit history as a graph.

5. git status
	Use `git status` to list all new or modified files that haven't yet been committed.

6. git commit
	In Git, the git commit command is used to save the changes to the local repository. When you run git commit, it takes the staged snapshot and commits it to the project history. 

7. To create a new branch in Git	  
    	git branch <branch_name>
		
8. After creating the branch, you can switch to the newly created branch using the following command: 
	git checkout <branch_name>
	
	Alternatively, you can combine both commands into one using the -b flag to create and switch to the new branch in a single step: 
	git checkout -b <branch_name>

9. git merge
	The git merge command in Git is used to integrate changes from one branch into another. It combines multiple sequences of commits into one unified history. When you want to merge one branch into another, you typically use the following syntax:

10. git rebase
	The git rebase command in Git is used to reapply a series of commits from one branch to another. Unlike git merge, which integrates the changes of one branch into another, git rebase moves the entire feature branch to a new base commit. This effectively changes the base of the branch, allowing for a cleaner, more linear project history.

11. git reset
	The git reset command in Git is a powerful tool that is used to reset the current state of the repository. It can be used to undo changes or move the current branch to a different state. Here are the key options with the git reset command:

	git reset --soft: Moves the HEAD to the specified commit, but leaves the changes in the staging area. It does not affect the working directory.
	git reset --mixed: This is the default option if no mode is specified. It moves the HEAD to the specified commit and updates the staging area but does not affect the working directory. This is useful when you want to unstage changes.
	git reset --hard: Moves the HEAD to the specified commit and updates both the staging area and the working directory. Be cautious when using this option as it discards all changes since the specified commit.

		Here is an example of how to use the git reset command:
			git reset --soft HEAD~3
12. git revert
	used to create a new commit that undoes the changes from a previous commit. This is useful if you want to create a new commit that effectively reverses the changes introduced by an earlier commit, while keeping a record of the reversion. Here's how you can use it:
	git revert <commit-hash>

13. Difference between Revert, Rebase, and Reset:

	- Git Revert : It creates a new commit that undoes the changes from a specific previous commit. It is a safe way to undo changes on a public branch since it does not alter the existing commit history. Reverting is typically used to fix a mistake in a commit without altering the commit history.
	- Git Rebase : Rebase is a way to integrate the changes from one branch onto another. It works by moving the starting point of the branch to a different commit, applying the commits from one branch to another, and then reapplying the commits from the original branch on top of the new base. This can be used to maintain a linear project history. Rebase should be used carefully, especially when working with shared branches, as it rewrites commit history and can cause conflicts for other users.
	- Git Reset : Reset is used to reset the current HEAD to a specified state. It can be used to undo changes or move the current branch to a different commit. There are three types of resets: soft, mixed, and hard.

		Soft reset keeps the changes in the working directory.
		Mixed reset keeps the changes in the working directory but resets the staging area to the specified commit.
		Hard reset discards all changes in the working directory and staging area, reverting the repository to the specified commit.

	In summary, revert creates a new commit to undo changes, rebase integrates changes from one branch onto another, and reset is used to move the current branch to a different commit or undo changes with various degrees of aggressiveness. Each command serves a different purpose and should be used according to the specific requirements of the Git workflow.
